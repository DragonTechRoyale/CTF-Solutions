import numpy as np
import time
import more_itertools as mit
from pwn import *
from py_console import console


def filer_string_to_int(string) -> int:
    # fuck regx
    numeric_filter = filter(str.isdigit, string)
    numeric_string = "".join(numeric_filter)
    return int(numeric_string)

def send_payload(payload, r) -> str:
    payload = str(payload)
    console.info(f"[*] payload: {payload}")
    r.sendline(bytes(payload.encode()))
    sum_string = r.recv().decode()
    print(sum_string)
    return sum_string


def chunk_list(our_list, chunk_size):
    chunked_list = list()
    for i in range(0, len(our_list), chunk_size):
        chunked_list.append(our_list[i:i+chunk_size])
    
    return chunked_list


def split_list(our_list):
    return chunk_list(our_list, len(our_list) // 2)


def create_list(num) -> list:
    return_list = []
    return_list_len = (num // 100) + 1
    '''
    for i in range(return_list_len):
        tmp = []
        if i + 1 == return_list_len:
            for j in range(i * 100, num):
                tmp.append(j)
        else:
            for j in range(i * 100, (i * 100) + 100):
                tmp.append(j)
        return_list.append(tmp)'''
    tmp = []
    for i in range(0, num // 2):
        tmp.append(i)
    return_list.append(tmp)
    tmp = []
    for i in range(num // 2, num):
        tmp.append(i)
    return_list.append(tmp)
    
    return return_list
    

def main():
    context(arch = 'i386', os = 'linux')

    r = remote('pwnable.kr', 9007)
    # EXPLOIT CODE GOES HERE
    print(r.recv().decode())
    time.sleep(3)

    while True:
        NC = r.recv().decode()
        print(NC)
        N_coins = filer_string_to_int(NC.split(' ')[0])
        C_chances = filer_string_to_int(NC.split(' ')[1])
        '''
        For each instance:
        1. Weigh a 100 coins until a non didvidable by 10 weight is achived
        2. Try each 40 coins in the 100  until a non didvidable by 10 weight is achived
        3. Try 15 coins in the 40  until a non didvidable by 10 weight is achived
        4. Try 5
        5. Try 3
        6. Try each of the the 3 until a weight of 9 is achived
        '''
        sum_string = "0"
        payload_list = create_list(N_coins)
        payload_row = []
        prev_len = 0
        prev_sum = 0
        match len(str(N_coins)):
            case 3:
                for i in range(C_chances):
                    if sum_string == "" or int(sum_string) % 10 == 0:
                        prev_len = len(payload_row)   
                        prev_sum = int(sum_string)
                        payload_row = payload_list.pop(0)
                        payload = " ".join(str(x) for x in payload_row) 
                        sum_string = send_payload(payload, r)
                    elif int(sum_string) % 10 != 0 and int(sum_string) != 9:
                        if prev_sum % 10 == 0:
                            payload_list = split_list(payload_row)
                        else:
                            payload_list = split_list(payload_row)
                        prev_len = len(payload_row)   
                        prev_sum = int(sum_string)
                        payload_row = payload_list.pop(0)
                        payload = " ".join(str(x) for x in payload_row) 
                        sum_string = send_payload(payload, r)    
                    else:
                        prev_len = len(payload_row)   
                        prev_sum = int(sum_string)
                        sum_string = send_payload(payload, r)
            case 2:
                payload_list = split_list(payload_list[0])
                for i in range(C_chances):
                    if sum_string == "" or int(sum_string) % 10 == 0:
                        payload_row = payload_list.pop(0)
                        payload = " ".join(str(x) for x in payload_row) 
                        sum_string = send_payload(payload, r)
                        prev_len = len(payload_row)   
                        prev_sum = int(sum_string)
                    elif int(sum_string) % 10 != 0 and int(sum_string) != 9:
                        payload_list = split_list(payload_row)
                        payload_row = payload_list.pop(0)
                        payload = " ".join(str(x) for x in payload_row) 
                        sum_string = send_payload(payload, r)
                        prev_len = len(payload_row)   
                        prev_sum = int(sum_string)
                    else:
                        sum_string = send_payload(payload, r)
                        prev_len = len(payload_row)   
                        prev_sum = int(sum_string)
        message = r.recvlines()
        print(message)
                
                
if __name__ == '__main__':
    main()