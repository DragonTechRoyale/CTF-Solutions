import time
from pwn import *


def list_to_str(list):
    return " ".join(str(x) for x in list)

def filer_string_to_int(string):
    numeric_filter = filter(str.isdigit, string)
    numeric_string = "".join(numeric_filter)
    return int(numeric_string)

def send_payload(payload, r):
    payload = str(payload)
    #console.info(f"[*] payload: {payload}")
    r.sendline(bytes(payload.encode()))
    sum_string = r.recv().decode()
    print(sum_string)
    return sum_string

def create_list(num):
    return_list = []
    for i in range(0, num):
        return_list.append(i)
    return return_list
    

def main():
    print("""
          To Run: unless your internet is somehow fast enough,
          open Python (ver. 2 cuz they don't have pwntools installed in ver. 3) 
          shell on a Pwnable.kr ssh connection and run this code.
          I haven't found a way to run it as a script so I copy pasted the imports,
          4 functions above, and the contents of this main() function (without this 
          print() message). 
          
          How this exploit works:
          The game gives us a random 'fake coin' in each coin set, so I perform a 
          binary search on the coins to find which one is the 'fake coin'. This CTF
          has no actual bugs or something to really exploit...
          """)
    
    context(arch = 'i386', os = 'linux')
    context.log_level = 'debug'
    r = remote('0', 9007)
    r.recv()
    time.sleep(3)
    while True:
        NC = str(r.recv().decode())
        print(NC)
        N_coins = filer_string_to_int(NC.split(' ')[0])
        C_chances = filer_string_to_int(NC.split(' ')[1])
        start_index = 0
        end_index = N_coins - 1
        middle_index = end_index // 2
        numbers = create_list(N_coins)
        sum = 0
        for i in range(0, C_chances+1):
            middle_index = (end_index + start_index) // 2
            payload = send_payload(list_to_str(numbers[start_index:middle_index+1]), r)
            if 'Correct!' in payload:
                break
            sum = int(payload)
            if sum % 10 != 0:
                end_index = middle_index 
            else:
                start_index = middle_index + 1
            
                
if __name__ == '__main__':
    main()